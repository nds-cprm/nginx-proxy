#
## by agsb@
# in 17/04/2020 from https://serverfault.com/questions/940842/strange-character-added-at-the-end-of-url

######################################################################
### Redirect non-www to www
#######################################################################
#if ($host = 'host.example.com' ) {
#rewrite ^/(.*)$ $scheme://main.example.com/$1 permanent;
#}

# -- Socket settings, see http://wiki.nginx.org/HttpCoreModule
connection_pool_size        8k;
request_pool_size           8k;

client_header_buffer_size   4k;
large_client_header_buffers 8 8k;

client_max_body_size    10m;
client_body_buffer_size 128k;

# -- Performance, see http://wiki.nginx.org/HttpCoreModule
sendfile on;
sendfile_max_chunk 1m;
postpone_output 0;
tcp_nopush on;
tcp_nodelay on;

# -- Output buffering, see http://wiki.nginx.org/HttpCoreModule
output_buffers 8 32k;

# -- Filehandle Cache, useful when serving a large number of static files
open_file_cache max=2000 inactive=20s;
open_file_cache_valid 30s;
open_file_cache_min_uses 2;
open_file_cache_errors on;

# -- Character encoding, see http://wiki.nginx.org/HttpCharsetModule
charset         utf-8;
source_charset  utf-8;

# -- Security options, see http://wiki.nginx.org/HttpCoreModule
server_name_in_redirect off;
server_tokens off;
ignore_invalid_headers on;

## Disable following symlinks
disable_symlinks if_not_owner;

## Protect against clickjacking
add_header X-Frame-Options SAMEORIGIN;

## HSTS Header - See http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
add_header Strict-Transport-Security max-age=31536000;

## Referrer-policy
add_header Referrer-Policy "unsafe-url";

## Reduce MIME type security risks
add_header X-Content-Type-Options "nosniff";

## Reflected XSS prevention
add_header X-XSS-Protection "1; mode=block";

## Prevent content transformation
add_header Cache-Control "no-transform";
## Protect against common file injection attacks
set $file_injection 0;
if ($query_string ~ "[a-zA-Z0-9_]=http://") {
set $file_injection 1;
}
if ($query_string ~ "[a-zA-Z0-9_]=(\.\.//?)+") {
set $file_injection 1;
}
if ($query_string ~ "[a-zA-Z0-9_]=/([a-z0-9_.]//?)+") {
set $file_injection 1;
}
if ($file_injection = 1) {
return 403;
break;
}

## Protect against common exploit attacks
set $common_exploit 0;
if ($query_string ~ "proc/self/environ") {
set $common_exploit 1;
}
if ($query_string ~ "mosConfig_[a-zA-Z_]{1,21}(=|\%3D)") {
set $common_exploit 1;
}
if ($query_string ~ "base64_(en|de)code\(.*\)") {
set $common_exploit 1;
}
if ($query_string ~ "(<|%3C).*script.*(>|%3E)") {
set $common_exploit 1;
}
if ($query_string ~ "GLOBALS(=|\[|\%[0-9A-Z]{0,2})") {
set $common_exploit 1;
}
if ($query_string ~ "_REQUEST(=|\[|\%[0-9A-Z]{0,2})") {
set $common_exploit 1;
}
if ($common_exploit = 1) {
return 403;
}

